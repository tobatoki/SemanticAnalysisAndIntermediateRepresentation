/*******************************
***** SECTION 1 - OPTIONS *****
*******************************/

options {
    JAVA_UNICODE_ESCAPE = true;
    IGNORE_CASE = true;

    MULTI = true;
    VISITOR = true;
    NODE_DEFAULT_VOID = true;
    NODE_PREFIX = "";
}

/*********************************
***** SECTION 2 - USER CODE *****
*********************************/

PARSER_BEGIN(cal)
import java.io.*;

    public class cal {

        public static SymbolTable st = new SymbolTable();
        public static String scope = "global";

        public static void main(String [] args) throws ParseException, FileNotFoundException {
        cal parser;

        if(args.length < 1) {
            System.out.println("Please pass in the filename.");
            System.exit(1);
        }

        parser = new cal(new java.io.FileInputStream(args[0]));


            // Print AST
            System.out.println("\n" + "************ABSTRACT SYNTAX TREE***********" + "\n");
        		SimpleNode root = parser.program();
        		root.dump("");
        		System.out.println();

            // Print Symbol Table
            System.out.println("\n" + "**************SYMBOL TABLE*************" + "\n");
        		st.printST();
            System.out.println();
            SemanticAnalyser semantic_Analyser = new SemanticAnalyser();
            root.jjtAccept(semantic_Analyser, st);

            // 3 Address Code

            System.out.println("\n" + "************THREE ADDRESS VISITOR***********");
            System.out.println();
            ThreeAddress tac = new ThreeAddress();
            root.jjtAccept(tac, null);


    }
}
PARSER_END(cal)

/*****************************************
 ***** SECTION 3 - DEFINITION OF TOKENS ***
 ******************************************/

/* Ignore any type of whitespaces and comments */
SKIP:{<" "|"\t"|"\n"|"\r"|"\r\n">|<"//"(~["\n","\r"])*("\n"|"\r"|"\r\n")>|<"/*"(~[])*"*""/">}

TOKEN: /* OPERATORS */
{

<COMMA:",">|<SEMI_COLON:";">|<COLON:":">|<ASSIGN:":=">|<LBR:"(">|<RBR:")">|<ADD:"+">|<MINUS:"-">|<NEGATE:"~">|<OR:"|">|<AND:"&">|<EQUALS_TO:"=">|<NOT_EQUALS_TO:"!=">|<LESS_THAN:"<">|<LESS_THAN_EQUALS:"<=">|<GREATER_THAN:">">|<GREATER_THAN_EQUALS:">=">

}

//RESERVED WORDS
TOKEN:{

<VARIABLE:"variable">|<CONSTANT:"constant">|<RETURN:"return">|<INTEGER:"integer">|<BOOLEAN:"boolean">|<VOID:"void">|<MAIN:"main">|<IF:"if">|<ELSE:"else">|<TRUE:"true">|<FALSE:"false">|<WHILE:"while">|<BEGIN:"begin">|<END:"end">|<IS:"is">|<SKP:"skip">

}

TOKEN:{

<#CHAR:["a"-"z"]|["A"-"Z"]>|<#DIGIT:["0"-"9"]>|<NUMBER:("-")?["1"-"9"](<DIGIT>)*|"0">|<IDENTIFIER:(<CHAR>)((<DIGIT>)|(<CHAR>)|"_")*>

}

/*********************************
* SECTION 4 - THE GRAMMAR  RULES *
*********************************/

SimpleNode program () #Program : { }
{
  decl_list()
  function_list()

	main() <EOF> {return jjtThis;}

}

void decl_list() : { }
{
    ( decl())*
}

void decl() : { }
{
    (var_decl() | const_decl()) <SEMI_COLON>
}

void var_decl() #Var_Decl : {Token t; String id; String type; }
{
  t = < VARIABLE > id = identifier() < COLON > type =

	type()
  {jjtThis.value = t.image;
    st.put(id, type, "variable", scope); }

}

void const_decl() #Const_Decl: {Token t; String id; String type;  }
{
  t = < CONSTANT > id = identifier() < COLON > type = type()

	< ASSIGN > expression()
 { jjtThis.value = t.image;
   st.put(id, type, "constant", scope); }

}

	void function_list(): {
		}{(function()function_list()|{})
	}

void function() #Function : { Token t; String id; String type;  }
{
  (type = type() id =

	identifier() {st.put( id, type, "function", scope);

	if(!scope.equals("global")) {
		st.put(id,  type,  "function",  "global");}
	scope = id;}

	< LBR > parameter_list() < RBR > < IS >
  decl_list()
  < BEGIN >
  statement_block()
  < RETURN >   < LBR > (expression() | {} ) < RBR >   < SEMI_COLON > #Ret
  < END >)
}

	String type()#Type: {
		Token t;}{t=<INTEGER>{jjtThis.value=t.image;return t.image;}|t=<BOOLEAN>{jjtThis.value=t.image;return t.image;}|t=<VOID>{jjtThis.value=t.image;return t.image;}
	}

	void parameter_list(): {
		}{nemp_parameter_list()|{}
	}

	void nemp_parameter_list()#Parameter_list(>1): {
		String type;String id;}{id=identifier()<COLON>type=type()(<COMMA>nemp_parameter_list()|{}){st.put(id,type,"parameter",scope);}
	}

	void main()#Main: {
		}{{scope="main";}(<MAIN><BEGIN>decl_list()statement_block()<END>)
	}

	void statement_block(): {
		}{(statement()statement_block())|{}
	}

	void statement()#Statement: {
		Token t;}{identifier()statement_help()|(<BEGIN>statement_block()<END>)|(t=<IF>condition()<BEGIN>statement_block()<END><ELSE><BEGIN>statement_block()<END>{jjtThis.value=t.image;})|(t=<WHILE>condition()<BEGIN>statement_block()<END>{jjtThis.value=t.image;})|(<SKP><SEMI_COLON>)
	}

	void statement_help(): {
		Token t;}{

		t=<ASSIGN>expression()<SEMI_COLON>{jjtThis.value=t.image;}#Assignment|t=<LBR>arg_list()<RBR><SEMI_COLON>#FunctionAssignment|{}
	}

	void expression(): {
		}{(fragment()binary_arith_op())|(<LBR>expression()<RBR>binary_arith_op())
	}

void binary_arith_op(): {Token t; }
{
  t =

	< ADD > expression() {jjtThis.value = t.image;}#AddOp|t=

	< MINUS > expression() {jjtThis.value = t.image;}#MinusOp|{

}}

void fragment(): {
		Token t;}{<MINUS>identifier()#MinusOp|(t=<IDENTIFIER>[<LBR>arg_list()<RBR>]{jjtThis.value=t.image;})#FunctionRet|num()|bool()
	}

	void num()#Num: {
		Token t;}{t=<NUMBER>{jjtThis.value=t.image;}
	}

	void bool()#Bool: {
		Token t;}{(t=<TRUE>|t=<FALSE>){jjtThis.value=t.image;}
	}

	void condition(): {
		}{(<NEGATE>condition()condition_help())|LOOKAHEAD(3)(<LBR>condition()<RBR>condition_help())|(expression()comp_op()condition_help())
	}

void condition_help() : {Token t;}
{
  t =

	< AND > condition() {jjtThis.value = t.image;}#ANDOperator|t=

	< OR > condition() {jjtThis.value = t.image;}#OROperator|{

}}

void comp_op()#Comp_Op: {
		Token t;}{equals_to()|not_equals_to()|less_than()|less_than_equals()|greater_than()|greater_than_equals()|or()|and()
	}

void equals_to() #EQOperator : {Token t;}
{
  t =

	< EQUALS_TO > expression() {jjtThis.value = t.image;}

}

void not_equals_to() #NEQOperator : {Token t;}
{
  t =

	< NOT_EQUALS_TO > expression() {jjtThis.value = t.image;}

}

void less_than() #LTOperator : {Token t;}
{
  t =

	< LESS_THAN > expression() {jjtThis.value = t.image;}

}

void less_than_equals() #LTEOperator : {Token t;}
{
  t =

	< LESS_THAN_EQUALS > expression() {jjtThis.value = t.image;}

}

void greater_than() #GTOperator : {Token t;}
{
  t =

	< GREATER_THAN > expression() {jjtThis.value = t.image;}

}

void greater_than_equals() #GTEOperator : {Token t;}
{
  t =

	< GREATER_THAN_EQUALS > expression() {jjtThis.value = t.image;}

}

void or() #OROperator : {Token t;}
{
  t =

	< OR > expression() {jjtThis.value = t.image;}

}

void and() #ANDOperator : {Token t;}
{
  t =

	< AND > expression() {jjtThis.value = t.image;}

}

void arg_list()#Arg_List: {
		}{[nemp_arg_list()]
	}

	void nemp_arg_list(): {
		}{identifier()[<COMMA>nemp_arg_list()]
	}

String identifier() #Identifier : {Token t;}
{
  t = < IDENTIFIER > {jjtThis.value = t.image; return t.image; }
}
